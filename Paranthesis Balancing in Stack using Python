class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
        
class stack:
    def __init__(self):
        self.top=None
        
    def isempty(self):
        if self.top==None:
            return 1
        else:
            return 0
    def push(self,data):
        new_node=Node(data)
        if self.top==None:
            self.top=new_node
        else:
            new_node.next=self.top
            self.top=new_node
            
    #remove the first element from the top
    def pop(self):
        if self.isempty():
            print("Stack Underflow")
        else:
            poppednode=self.top
            poppednode=poppednode.next
            value=poppednode.data
            poppednode.next=None
            return value
            
    def display(self):
        if self.isempty():
            print("Stack Underflow")
        else:
            p=self.top
            while(p!=None):
                print(p.data)
                p=p.next
                
    def peek(self,pos):
        p=self.top
        index=0
        
        while (index<pos-1 and p!=None):
            p=p.next
            index=index+1
            
        if p!=None:
            print(p.data)
        else:
            print("Element is not present ")
    
                
                
                
def check_paranthesis(exp):
    new_stack=stack()
    for i in range(len(exp)):
        print(new_stack,exp[i])
        if exp[i]=="(":
            new_stack.push(exp[i])
        if exp[i]==")":
            if new_stack.isempty:
                print("Unbalanced Parnthesis")
                return
            else:
                new_stack.pop()
                
    print("Stack is balanced")
    return
    
            

            
    
            
    
            
    
        
        
        
        
c1=stack()
c1.push(4)
c1.push(3)
c1.push(8)
c1.push(11)

#c1.display()
#c1.peek(2)
#element=c1.pop()
check_paranthesis("arya+(2+3+4+())))")
